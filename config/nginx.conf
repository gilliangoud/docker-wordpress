worker_processes  1;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    multi_accept on;
}

http {
    include mime.types;
    default_type application/octet-stream;

    set_real_ip_from  10.0.0.0/8;
    set_real_ip_from  172.16.0.0/12;
    set_real_ip_from  192.168.0.0/16;
    real_ip_header    X-Forwarded-For;

    log_format  main_timed  '$remote_addr - $remote_user [$time_local] "$request" '
                            '$status $body_bytes_sent "$http_referer" '
                            '"$http_user_agent" "$http_x_forwarded_for" '
                            '$request_time $upstream_response_time $pipe $upstream_cache_status';

    access_log /dev/stdout main_timed;
    error_log /dev/stderr notice;

    sendfile        on;
    tcp_nopush     on;
    tcp_nodelay on;

    keepalive_timeout 65;

    # Security
    server_tokens off;
    server_name_in_redirect off;

    # Enable gzip compression
    gzip on;
    gzip_disable "msie6";
    gzip_proxied any;

    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript;

    # Forward the cloudfront scheme from upstream
    # map "$http_cloudfront_forwarded_proto$http_x_forwarded_proto" $forwarded_scheme {
    #      default off;
    #      "~*(https)" on;
    #  }

    limit_req_zone $http_x_forwarded_for zone=WPRATELIMIT:10m rate=10r/s;
    fastcgi_cache_path /var/run/nginx levels=1:2 keys_zone=WORDPRESS:100m max_size=1024m inactive=120m;
    fastcgi_cache_key "$scheme$request_method$host$request_uri";
    fastcgi_cache_use_stale error timeout invalid_header http_500;
    fastcgi_ignore_headers Cache-Control Expires Set-Cookie;

    server {
        listen [::]:80 default_server;
        listen 80 default_server;
        server_name _;

        sendfile off;

        # Increase proxy buffers for large requests
        proxy_buffer_size 128k;
        proxy_buffers 4 256k;
        proxy_busy_buffers_size 256k;

        # Upload limit
        client_max_body_size 50m;
        client_body_buffer_size 128k;

        root /usr/src/wordpress;
        index index.php;

        # BEGIN SMUSH-WEBP
        location ~* "wp-content\/(uploads\/)(.*\.(?:png|jpe?g))" {
            root /var/www;
            add_header Vary Accept;
            set $image_path $2;
            if (-f "/var/www/wp-content/smush-webp/disable_smush_webp") {
                break;
            }
            if ($http_accept !~* "webp") {
                break;
            }
            expires	max;
            try_files /wp-content/smush-webp/$image_path.webp $uri =404;
        }
        # END SMUSH-WEBP

        # Based on https://codeable.io/wordpress-developers-intro-to-docker-part-two/
        location /wp-content {
            root /var/www;
            expires 7d;
            add_header Cache-Control "public";
        }

        ## Restrictions stuff
        # redirect server error pages to the static page /50x.html
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /var/lib/nginx/html;
        }

        location = /favicon.ico {
            log_not_found off;
            access_log off;
        }

        location = /robots.txt {
            log_not_found off;
            access_log off;
        }

        # deny access to . files, for security
        location ~ /\. {
            log_not_found off;
            deny all;
        }

        ## END Restrictions stuff

        ## Wordpress stuff
        # Caching rules
        set $skip_cache 0;

        # POST requests and urls with a query string should always go to PHP
        if ($request_method = POST) {
            set $skip_cache 1;
        }
        if ($query_string != "") {
            set $skip_cache 1;
        }

        # Don't cache uris containing the following segments
        if ($request_uri ~* "/wp-login.php|/wp-admin/|/xmlrpc.php|wp-.*.php|^/feed/*|^/cart/*|^/order/*|/tag/.*/feed/*|index.php|/.*sitemap.*\.(xml|xsl)") {
            set $skip_cache 1;
        }

        # Don't use the cache for logged in users or recent commenters
        if ($http_cookie ~* "comment_author|wordpress_[a-f0-9]+|wp-postpass|wordpress_no_cache|wordpress_logged_in|woocommerce_cart_hash") {
            set $skip_cache 1;
        }

        # WordPress single site rules.
        # Designed to be included in any server {} block.

        # This order might seem weird - this is attempted to match last if rules below fail.
        # http://wiki.nginx.org/HttpCoreModule
        location / {
            try_files $uri $uri/ /index.php?$args;
        }

        # Add trailing slash to */wp-admin requests.
        rewrite /wp-admin$ $scheme://$host$uri/ permanent;

        # # Directives to send expires headers and turn off 404 error logging.
        # location ~* ^.+\.(eot|otf|woff|woff2|ttf|rss|atom|zip|tgz|gz|rar|bz2|doc|xls|exe|ppt|tar|mid|midi|wav|bmp|rtf|txt|xlsx|docx|pptx)$ {
        # access_log off;
        # log_not_found off;
        # expires max;
        # }

        # # Media: images, icons, video, audio send expires headers.
        # location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|tiff|tif)$ {
        # expires 1M;
        # access_log off;
        # add_header Cache-Control "public";
        # }

        # # CSS and Javascript send expires headers.
        # location ~* \.(?:css|js|xsl)$ {
        # expires 1y;
        # access_log off;
        # add_header Cache-Control "public";
        # }

        # # HTML send expires headers.
        # location ~* \.(html)$ {
        # expires 7d;
        # access_log off;
        # add_header Cache-Control "public";
        # }

        # # Browser caching of static assets.
        # location ~* \.(jpg|jpeg|png|gif|ico|css|js|pdf|xsl)$ {
        # expires 7d;
        # add_header Cache-Control "public, no-transform";
        # }

        # Enable Gzip compression in NGNIX.
        gzip on;
        gzip_disable "msie6";

        gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml;

        # Pass all .php files onto a php-fpm/php-fcgi server.
        location ~ [^/]\.php(/|$) {
            fastcgi_cache WORDPRESS; # The name of the cache key-zone to use
            fastcgi_cache_valid 200 120m; # What to cache: 'Code 200' responses, for 2 hours
            fastcgi_cache_valid 404 60m;
            fastcgi_cache_methods GET HEAD; # What to cache: only GET and HEAD requests (not POST)
            add_header X-Fastcgi-Cache $upstream_cache_status; # Add header so we can see if the cache hits or misses

            fastcgi_split_path_info ^(.+?\.php)(/.*)$;

            fastcgi_cache_bypass $skip_cache;
            fastcgi_no_cache $skip_cache;

            proxy_buffer_size 512k;
            proxy_buffers 64 256k;
            proxy_busy_buffers_size 512k;

            if (!-f $document_root$fastcgi_script_name) {
                return 404;
            }
            # This is a robust solution for path info security issue and works with "cgi.fix_pathinfo = 1" in /etc/php.ini (default)

            include fastcgi_params;
            fastcgi_buffers 128 4096k;
            fastcgi_buffer_size 4096k;
            fastcgi_index index.php;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            fastcgi_param PHP_VALUE "upload_max_filesize=256m
        post_max_size=256m";
            fastcgi_read_timeout 600;
            proxy_read_timeout 600;

            location ~ \wp-login.php$ {
                limit_req zone=WPRATELIMIT burst=1 nodelay;
                # fastcgi_pass unix:/var/run/php-fpm.sock;
                fastcgi_pass 127.0.0.1:9000;
            }
            # fastcgi_pass unix:/var/run/php-fpm.sock;
            fastcgi_pass 127.0.0.1:9000;
        }

        ## END Wordpress stuff

        location ~ /purge(/.*) {
            fastcgi_cache_purge WORDPRESS "$scheme$request_method$host$1";
        }

        # location / {
        #     # First attempt to serve request as file, then
        #     # as directory, then fall back to index.php
        #     try_files $uri $uri/ /index.php?$args;
        # }

        # # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        # location ~ \.php$ {
        #     try_files $uri =404;
        #     fastcgi_split_path_info ^(.+\.php)(/.+)$;

        #     #fastcgi_intercept_errors on;
        #     fastcgi_buffer_size 128k;
        #     fastcgi_buffers 4 256k;
        #     fastcgi_busy_buffers_size 256k;

        #     fastcgi_index index.php;
        #     fastcgi_pass 127.0.0.1:9000;

        #     fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        #     include fastcgi_params;

        #     # Forward the scheme from upstream
        #     fastcgi_param HTTPS $forwarded_scheme;
        # }

    }
}
